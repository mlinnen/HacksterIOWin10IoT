//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace net { namespace protosystem { namespace GarageDoor {

// Methods
public ref class GarageDoorOpenOrCloseGarageCalledEventArgs sealed
{
public:
    GarageDoorOpenOrCloseGarageCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ bool interfaceMemberOpen);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property GarageDoorOpenOrCloseGarageResult^ Result
    {
        GarageDoorOpenOrCloseGarageResult^ get() { return m_result; }
        void set(_In_ GarageDoorOpenOrCloseGarageResult^ value) { m_result = value; }
    }

    property bool Open
    {
        bool get() { return m_interfaceMemberOpen; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<GarageDoorOpenOrCloseGarageResult^>^ GetResultAsync(GarageDoorOpenOrCloseGarageCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<GarageDoorOpenOrCloseGarageResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<GarageDoorOpenOrCloseGarageResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    GarageDoorOpenOrCloseGarageResult^ m_result;
    bool m_interfaceMemberOpen;
};

public ref class GarageDoorOpenGarageCalledEventArgs sealed
{
public:
    GarageDoorOpenGarageCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property GarageDoorOpenGarageResult^ Result
    {
        GarageDoorOpenGarageResult^ get() { return m_result; }
        void set(_In_ GarageDoorOpenGarageResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<GarageDoorOpenGarageResult^>^ GetResultAsync(GarageDoorOpenGarageCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<GarageDoorOpenGarageResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<GarageDoorOpenGarageResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    GarageDoorOpenGarageResult^ m_result;
};

public ref class GarageDoorCloseGarageCalledEventArgs sealed
{
public:
    GarageDoorCloseGarageCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property GarageDoorCloseGarageResult^ Result
    {
        GarageDoorCloseGarageResult^ get() { return m_result; }
        void set(_In_ GarageDoorCloseGarageResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<GarageDoorCloseGarageResult^>^ GetResultAsync(GarageDoorCloseGarageCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<GarageDoorCloseGarageResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<GarageDoorCloseGarageResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    GarageDoorCloseGarageResult^ m_result;
};

// Readable Properties
public ref class GarageDoorGetVersionRequestedEventArgs sealed
{
public:
    GarageDoorGetVersionRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property GarageDoorGetVersionResult^ Result
    {
        GarageDoorGetVersionResult^ get() { return m_result; }
        void set(_In_ GarageDoorGetVersionResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<GarageDoorGetVersionResult^>^ GetResultAsync(GarageDoorGetVersionRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<GarageDoorGetVersionResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<GarageDoorGetVersionResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    GarageDoorGetVersionResult^ m_result;
};

public ref class GarageDoorGetServiceVersionRequestedEventArgs sealed
{
public:
    GarageDoorGetServiceVersionRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property GarageDoorGetServiceVersionResult^ Result
    {
        GarageDoorGetServiceVersionResult^ get() { return m_result; }
        void set(_In_ GarageDoorGetServiceVersionResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<GarageDoorGetServiceVersionResult^>^ GetResultAsync(GarageDoorGetServiceVersionRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<GarageDoorGetServiceVersionResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<GarageDoorGetServiceVersionResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    GarageDoorGetServiceVersionResult^ m_result;
};

public ref class GarageDoorGetLocationRequestedEventArgs sealed
{
public:
    GarageDoorGetLocationRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property GarageDoorGetLocationResult^ Result
    {
        GarageDoorGetLocationResult^ get() { return m_result; }
        void set(_In_ GarageDoorGetLocationResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<GarageDoorGetLocationResult^>^ GetResultAsync(GarageDoorGetLocationRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<GarageDoorGetLocationResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<GarageDoorGetLocationResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    GarageDoorGetLocationResult^ m_result;
};

public ref class GarageDoorGetDoorStateRequestedEventArgs sealed
{
public:
    GarageDoorGetDoorStateRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property GarageDoorGetDoorStateResult^ Result
    {
        GarageDoorGetDoorStateResult^ get() { return m_result; }
        void set(_In_ GarageDoorGetDoorStateResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<GarageDoorGetDoorStateResult^>^ GetResultAsync(GarageDoorGetDoorStateRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<GarageDoorGetDoorStateResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<GarageDoorGetDoorStateResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    GarageDoorGetDoorStateResult^ m_result;
};

// Writable Properties
public ref class GarageDoorSetLocationRequestedEventArgs sealed
{
public:
    GarageDoorSetLocationRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property Platform::String^ Value
    {
        Platform::String^ get() { return m_value; }
    }

    property GarageDoorSetLocationResult^ Result
    {
        GarageDoorSetLocationResult^ get() { return m_result; }
        void set(_In_ GarageDoorSetLocationResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<GarageDoorSetLocationResult^>^ GetResultAsync(GarageDoorSetLocationRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<GarageDoorSetLocationResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<GarageDoorSetLocationResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    Platform::String^ m_value;
    GarageDoorSetLocationResult^ m_result;
};

} } } 
